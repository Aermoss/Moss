namespace raw {
    include "api/moss_api.py" : *;
};

const int MOSS_KEY_UNKNOWN = -1;
const int MOSS_KEY_SPACE = 32;
const int MOSS_KEY_APOSTROPHE = 39;
const int MOSS_KEY_COMMA = 44;
const int MOSS_KEY_MINUS = 45;
const int MOSS_KEY_PERIOD = 46;
const int MOSS_KEY_SLASH = 47;
const int MOSS_KEY_0 = 48;
const int MOSS_KEY_1 = 49;
const int MOSS_KEY_2 = 50;
const int MOSS_KEY_3 = 51;
const int MOSS_KEY_4 = 52;
const int MOSS_KEY_5 = 53;
const int MOSS_KEY_6 = 54;
const int MOSS_KEY_7 = 55;
const int MOSS_KEY_8 = 56;
const int MOSS_KEY_9 = 57;
const int MOSS_KEY_SEMICOLON = 59;
const int MOSS_KEY_EQUAL = 61;
const int MOSS_KEY_A = 65;
const int MOSS_KEY_B = 66;
const int MOSS_KEY_C = 67;
const int MOSS_KEY_D = 68;
const int MOSS_KEY_E = 69;
const int MOSS_KEY_F = 70;
const int MOSS_KEY_G = 71;
const int MOSS_KEY_H = 72;
const int MOSS_KEY_I = 73;
const int MOSS_KEY_J = 74;
const int MOSS_KEY_K = 75;
const int MOSS_KEY_L = 76;
const int MOSS_KEY_M = 77;
const int MOSS_KEY_N = 78;
const int MOSS_KEY_O = 79;
const int MOSS_KEY_P = 80;
const int MOSS_KEY_Q = 81;
const int MOSS_KEY_R = 82;
const int MOSS_KEY_S = 83;
const int MOSS_KEY_T = 84;
const int MOSS_KEY_U = 85;
const int MOSS_KEY_V = 86;
const int MOSS_KEY_W = 87;
const int MOSS_KEY_X = 88;
const int MOSS_KEY_Y = 89;
const int MOSS_KEY_Z = 90;
const int MOSS_KEY_LEFT_BRACKET = 91;
const int MOSS_KEY_BACKSLASH = 92;
const int MOSS_KEY_RIGHT_BRACKET = 93;
const int MOSS_KEY_GRAVE_ACCENT = 96;
const int MOSS_KEY_WORLD_1 = 161;
const int MOSS_KEY_WORLD_2 = 162;
const int MOSS_KEY_ESCAPE = 256;
const int MOSS_KEY_ENTER = 257;
const int MOSS_KEY_TAB = 258;
const int MOSS_KEY_BACKSPACE = 259;
const int MOSS_KEY_INSERT = 260;
const int MOSS_KEY_DELETE = 261;
const int MOSS_KEY_RIGHT = 262;
const int MOSS_KEY_LEFT = 263;
const int MOSS_KEY_DOWN = 264;
const int MOSS_KEY_UP = 265;
const int MOSS_KEY_PAGE_UP = 266;
const int MOSS_KEY_PAGE_DOWN = 267;
const int MOSS_KEY_HOME = 268;
const int MOSS_KEY_END = 269;
const int MOSS_KEY_CAPS_LOCK = 280;
const int MOSS_KEY_SCROLL_LOCK = 281;
const int MOSS_KEY_NUM_LOCK = 282;
const int MOSS_KEY_PRINT_SCREEN = 283;
const int MOSS_KEY_PAUSE = 284;
const int MOSS_KEY_F1 = 290;
const int MOSS_KEY_F2 = 291;
const int MOSS_KEY_F3 = 292;
const int MOSS_KEY_F4 = 293;
const int MOSS_KEY_F5 = 294;
const int MOSS_KEY_F6 = 295;
const int MOSS_KEY_F7 = 296;
const int MOSS_KEY_F8 = 297;
const int MOSS_KEY_F9 = 298;
const int MOSS_KEY_F10 = 299;
const int MOSS_KEY_F11 = 300;
const int MOSS_KEY_F12 = 301;
const int MOSS_KEY_F13 = 302;
const int MOSS_KEY_F14 = 303;
const int MOSS_KEY_F15 = 304;
const int MOSS_KEY_F16 = 305;
const int MOSS_KEY_F17 = 306;
const int MOSS_KEY_F18 = 307;
const int MOSS_KEY_F19 = 308;
const int MOSS_KEY_F20 = 309;
const int MOSS_KEY_F21 = 310;
const int MOSS_KEY_F22 = 311;
const int MOSS_KEY_F23 = 312;
const int MOSS_KEY_F24 = 313;
const int MOSS_KEY_F25 = 314;
const int MOSS_KEY_KP_0 = 320;
const int MOSS_KEY_KP_1 = 321;
const int MOSS_KEY_KP_2 = 322;
const int MOSS_KEY_KP_3 = 323;
const int MOSS_KEY_KP_4 = 324;
const int MOSS_KEY_KP_5 = 325;
const int MOSS_KEY_KP_6 = 326;
const int MOSS_KEY_KP_7 = 327;
const int MOSS_KEY_KP_8 = 328;
const int MOSS_KEY_KP_9 = 329;
const int MOSS_KEY_KP_DECIMAL = 330;
const int MOSS_KEY_KP_DIVIDE = 331;
const int MOSS_KEY_KP_MULTIPLY = 332;
const int MOSS_KEY_KP_SUBTRACT = 333;
const int MOSS_KEY_KP_ADD = 334;
const int MOSS_KEY_KP_ENTER = 335;
const int MOSS_KEY_KP_EQUAL = 336;
const int MOSS_KEY_LEFT_SHIFT = 340;
const int MOSS_KEY_LEFT_CONTROL = 341;
const int MOSS_KEY_LEFT_ALT = 342;
const int MOSS_KEY_LEFT_SUPER = 343;
const int MOSS_KEY_RIGHT_SHIFT = 344;
const int MOSS_KEY_RIGHT_CONTROL = 345;
const int MOSS_KEY_RIGHT_ALT = 346;
const int MOSS_KEY_RIGHT_SUPER = 347;
const int MOSS_KEY_MENU = 348;
const int MOSS_KEY_LAST = MOSS_KEY_MENU;
const int MOSS_MOUSE_BUTTON_1 = 0;
const int MOSS_MOUSE_BUTTON_2 = 1;
const int MOSS_MOUSE_BUTTON_3 = 2;
const int MOSS_MOUSE_BUTTON_4 = 3;
const int MOSS_MOUSE_BUTTON_5 = 4;
const int MOSS_MOUSE_BUTTON_6 = 5;
const int MOSS_MOUSE_BUTTON_7 = 6;
const int MOSS_MOUSE_BUTTON_8 = 7;
const int MOSS_MOUSE_BUTTON_LAST = MOSS_MOUSE_BUTTON_8;
const int MOSS_MOUSE_BUTTON_LEFT = MOSS_MOUSE_BUTTON_1;
const int MOSS_MOUSE_BUTTON_RIGHT = MOSS_MOUSE_BUTTON_2;
const int MOSS_MOUSE_BUTTON_MIDDLE = MOSS_MOUSE_BUTTON_3;

namespace moss {
    int getObjectID() {
        return raw::getObjectID();
    }

    int getObjectIDByName(string name) {
        return raw::getObjectIDByName(name);
    }

    int getWindowID() {
        return raw::getWindowID();
    }

    bool setMeshTextureScale(int id, string mesh, string material, int scale) {
        raw::setMeshTextureScale(id, mesh, material, scale);
        return true;
    }

    bool setMeshRotateTexture(int id, string mesh, string material, int rotate) {
        raw::setMeshRotateTexture(id, mesh, material, rotate);
        return true;
    }

    bool setMeshAlbedoMap(int id, string mesh, string material, string albedoMap) {
        raw::setMeshAlbedoMap(id, mesh, material, albedoMap);
        return true;
    }

    bool setMeshRoughnessMap(int id, string mesh, string material, string roughnessMap) {
        raw::setMeshRoughnessMap(id, mesh, material, roughnessMap);
        return true;
    }

    bool setMeshMetallicMap(int id, string mesh, string material, string metallicMap) {
        raw::setMeshMetallicMap(id, mesh, material, metallicMap);
        return true;
    }

    bool setMeshNormalMap(int id, string mesh, string material, string normalMap) {
        raw::setMeshNormalMap(id, mesh, material, normalMap);
        return true;
    }

    bool setMeshSpecularMap(int id, string mesh, string material, string specularMap) {
        raw::setMeshSpecularMap(id, mesh, material, specularMap);
        return true;
    }

    bool setMeshAmbientMap(int id, string mesh, string material, string ambientMap) {
        raw::setMeshAmbientMap(id, mesh, material, ambientMap);
        return true;
    }

    bool setMeshCullFace(int id, string mesh, string material, bool cullFace) {
        raw::setMeshCullFace(id, mesh, material, cullFace);
        return true;
    }

    bool setMeshInverseNormal(int id, string mesh, string material, bool inverseNormal) {
        raw::setMeshInverseNormal(id, mesh, material, inverseNormal);
        return true;
    }

    namespace window {
        int getWidth(int id) {
            return raw::getWidth(id);
        }

        int getHeight(int id) {
            return raw::getHeight(id);
        }

        int[] getSize(int id) {
            return {raw::getWidth(id), raw::getHeight(id)};
        }
    };

    namespace input {
        bool getKey(int key) {
            return raw::getKey(key);
        }

        bool getMouseButton(int button) {
            return raw::getMouseButton(button);
        }

        bool setCursorVisible(bool visible) {
            raw::setCursorVisible(visible);
            return true;
        }

        bool setCursorPosition(float[] position) {
            raw::setCursorPosition(position);
            return true;
        }

        float[] getCursorPosition() {
            return {raw::getCursorPositionX(), raw::getCursorPositionY()};
        }
    };

    namespace transform {
        bool translate(int id, float[] value) {
            raw::translate(id, value);
            return true;
        }

        bool rotate(int id, float[] value) {
            raw::rotate(id, value);
            return true;
        }

        bool scale(int id, float[] value) {
            raw::scale(id, value);
            return true;
        }

        bool setPosition(int id, float[] position) {
            raw::setPosition(id, position);
            return true;
        }

        bool setRotation(int id, float[] rotation) {
            raw::setRotation(id, rotation);
            return true;
        }

        bool setScale(int id, float[] scale) {
            raw::setScale(id, scale);
            return true;
        }

        float[] getPosition(int id) {
            return {raw::getPositionX(id), raw::getPositionY(id), raw::getPositionZ(id)};
        }

        float[] getRotation(int id) {
            return {raw::getRotationX(id), raw::getRotationY(id), raw::getRotationZ(id)};
        }

        float[] getScale(int id) {
            return {raw::getScaleX(id), raw::getScaleY(id), raw::getScaleZ(id)};
        }
    };

    namespace camera {
        bool isVR() {
            return raw::isCameraVR();
        }

        bool setRotation(float[] rotation) {
            raw::setCameraRotation(rotation);
            return true;
        }

        float[] getRotation() {
            return {raw::getCameraPitch(), raw::getCameraYaw()};
        }

        bool setPosition(float[] position) {
            raw::setCameraPosition(position);
            return true;
        }

        float[] getPosition() {
            return {raw::getCameraPositionX(), raw::getCameraPositionY(), raw::getCameraPositionZ()};
        }
    };

    namespace vr {
        int controllerLeft = 0;
        int controllerRight = 1;
        int eyeLeft = 0;
        int eyeRight = 1;

        float[] getHmdDirection() {
            return {raw::getHmdDirectionX(), raw::getHmdDirectionY(), raw::getHmdDirectionZ()};
        }

        float[] getControllerJoystickPosition(int controller) {
            return {raw::getControllerJoystickPositionX(controller), raw::getControllerJoystickPositionY(controller)};
        }
    };
}